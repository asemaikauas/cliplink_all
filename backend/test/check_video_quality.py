#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, –±–∏—Ç—Ä–µ–π—Ç, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
"""

import os
import json
import subprocess
from pathlib import Path
from typing import Dict, List, Optional
import shutil

def get_ffprobe_info(video_path: Path) -> Optional[Dict]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é ffprobe
    """
    if not shutil.which('ffprobe'):
        print("‚ö†Ô∏è ffprobe –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        return None
    
    try:
        cmd = [
            'ffprobe', '-v', 'quiet', '-print_format', 'json', '-show_format', '-show_streams',
            str(video_path)
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            return json.loads(result.stdout)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ ffprobe: {result.stderr}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ffprobe: {e}")
        return None

def format_file_size(size_bytes: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    """
    if size_bytes < 1024:
        return f"{size_bytes} B"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.1f} KB"
    elif size_bytes < 1024 * 1024 * 1024:
        return f"{size_bytes / (1024 * 1024):.1f} MB"
    else:
        return f"{size_bytes / (1024 * 1024 * 1024):.1f} GB"

def format_bitrate(bitrate: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∏—Ç—Ä–µ–π—Ç –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    """
    if bitrate < 1000:
        return f"{bitrate} bps"
    elif bitrate < 1000000:
        return f"{bitrate / 1000:.1f} Kbps"
    else:
        return f"{bitrate / 1000000:.1f} Mbps"

def get_quality_rating(width: int, height: int) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    """
    if height >= 4320:
        return "üèÜ 8K (Ultra)"
    elif height >= 2160:
        return "üíé 4K (Very High)"
    elif height >= 1440:
        return "‚≠ê 2K/1440p (High)"
    elif height >= 1080:
        return "‚ú® Full HD (Good)"
    elif height >= 720:
        return "üì∫ HD (Standard)"
    elif height >= 480:
        return "üì± SD (Low)"
    else:
        return "‚ùå Very Low"

def analyze_video_quality(video_path: Path) -> Dict:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
    """
    analysis = {
        'file_path': str(video_path),
        'file_name': video_path.name,
        'file_size': video_path.stat().st_size,
        'file_size_formatted': format_file_size(video_path.stat().st_size)
    }
    
    # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é ffprobe
    ffprobe_data = get_ffprobe_info(video_path)
    
    if ffprobe_data:
        # –ù–∞–π—Ç–∏ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫
        video_stream = None
        audio_stream = None
        
        for stream in ffprobe_data.get('streams', []):
            if stream.get('codec_type') == 'video' and not video_stream:
                video_stream = stream
            elif stream.get('codec_type') == 'audio' and not audio_stream:
                audio_stream = stream
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ
        if video_stream:
            width = int(video_stream.get('width', 0))
            height = int(video_stream.get('height', 0))
            
            analysis.update({
                'width': width,
                'height': height,
                'resolution': f"{width}x{height}",
                'quality_rating': get_quality_rating(width, height),
                'video_codec': video_stream.get('codec_name', 'unknown'),
                'video_profile': video_stream.get('profile', 'unknown'),
                'fps': float(video_stream.get('r_frame_rate', '0/1').split('/')[0]) / float(video_stream.get('r_frame_rate', '0/1').split('/')[1]) if '/' in str(video_stream.get('r_frame_rate', '0/1')) else 0,
                'pixel_format': video_stream.get('pix_fmt', 'unknown')
            })
            
            # –ë–∏—Ç—Ä–µ–π—Ç –≤–∏–¥–µ–æ
            if 'bit_rate' in video_stream:
                video_bitrate = int(video_stream['bit_rate'])
                analysis['video_bitrate'] = video_bitrate
                analysis['video_bitrate_formatted'] = format_bitrate(video_bitrate)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–¥–∏–æ
        if audio_stream:
            analysis.update({
                'audio_codec': audio_stream.get('codec_name', 'unknown'),
                'audio_channels': audio_stream.get('channels', 0),
                'audio_sample_rate': audio_stream.get('sample_rate', 0)
            })
            
            if 'bit_rate' in audio_stream:
                audio_bitrate = int(audio_stream['bit_rate'])
                analysis['audio_bitrate'] = audio_bitrate
                analysis['audio_bitrate_formatted'] = format_bitrate(audio_bitrate)
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        format_data = ffprobe_data.get('format', {})
        if 'duration' in format_data:
            duration = float(format_data['duration'])
            analysis['duration'] = duration
            analysis['duration_formatted'] = f"{int(duration // 60)}:{int(duration % 60):02d}"
        
        if 'bit_rate' in format_data:
            total_bitrate = int(format_data['bit_rate'])
            analysis['total_bitrate'] = total_bitrate
            analysis['total_bitrate_formatted'] = format_bitrate(total_bitrate)
    
    return analysis

def print_video_quality(analysis: Dict):
    """
    –ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–∏–¥–µ–æ
    """
    print(f"\n{'='*60}")
    print(f"üìÅ –§–∞–π–ª: {analysis['file_name']}")
    print(f"{'='*60}")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {analysis['file_size_formatted']}")
    
    if 'resolution' in analysis:
        print(f"üéØ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {analysis['resolution']}")
        print(f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {analysis['quality_rating']}")
        print(f"üé¨ FPS: {analysis.get('fps', 'N/A'):.1f}")
        
        if 'duration_formatted' in analysis:
            print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {analysis['duration_formatted']}")
    
    # –í–∏–¥–µ–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"\nüé• –í–ò–î–ï–û:")
    if 'video_codec' in analysis:
        print(f"   –ö–æ–¥–µ–∫: {analysis['video_codec']}")
        print(f"   –ü—Ä–æ—Ñ–∏–ª—å: {analysis['video_profile']}")
        print(f"   –ü–∏–∫—Å–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {analysis['pixel_format']}")
        
        if 'video_bitrate_formatted' in analysis:
            print(f"   –ë–∏—Ç—Ä–µ–π—Ç: {analysis['video_bitrate_formatted']}")
    
    # –ê—É–¥–∏–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"\nüîä –ê–£–î–ò–û:")
    if 'audio_codec' in analysis:
        print(f"   –ö–æ–¥–µ–∫: {analysis['audio_codec']}")
        print(f"   –ö–∞–Ω–∞–ª—ã: {analysis['audio_channels']}")
        print(f"   –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {analysis.get('audio_sample_rate', 0)} Hz")
        
        if 'audio_bitrate_formatted' in analysis:
            print(f"   –ë–∏—Ç—Ä–µ–π—Ç: {analysis['audio_bitrate_formatted']}")
    
    # –û–±—â–∏–π –±–∏—Ç—Ä–µ–π—Ç
    if 'total_bitrate_formatted' in analysis:
        print(f"\nüìä –û–±—â–∏–π –±–∏—Ç—Ä–µ–π—Ç: {analysis['total_bitrate_formatted']}")

def scan_downloads_folder(downloads_dir: Path = Path("downloads")) -> List[Path]:
    """
    –ù–∞–π—Ç–∏ –≤—Å–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ downloads
    """
    if not downloads_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {downloads_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return []
    
    video_extensions = ['.mp4', '.mkv', '.avi', '.mov', '.webm']
    video_files = []
    
    for ext in video_extensions:
        video_files.extend(downloads_dir.glob(f"*{ext}"))
    
    return sorted(video_files)

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
    """
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ")
    print("="*60)
    
    # –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–ø–∫—É backend –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if Path("backend").exists() and not Path("downloads").exists():
        os.chdir("backend")
        print("üìÇ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –≤ –ø–∞–ø–∫—É backend")
    
    downloads_dir = Path("downloads")
    video_files = scan_downloads_folder(downloads_dir)
    
    if not video_files:
        print("‚ùå –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ downloads")
        print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –≤: {downloads_dir.absolute()}")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(video_files)} –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ
    all_analyses = []
    
    for video_file in video_files:
        try:
            analysis = analyze_video_quality(video_file)
            all_analyses.append(analysis)
            print_video_quality(analysis)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {video_file.name}: {e}")
    
    # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    if all_analyses:
        print(f"\n{'='*80}")
        print("üìä –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ö–ê–ß–ï–°–¢–í–ê")
        print(f"{'='*80}")
        print(f"{'–§–∞–π–ª':<40} {'–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ':<12} {'–†–∞–∑–º–µ—Ä':<10} {'–ö–∞—á–µ—Å—Ç–≤–æ':<15}")
        print("-" * 80)
        
        for analysis in all_analyses:
            filename = analysis['file_name'][:37] + "..." if len(analysis['file_name']) > 40 else analysis['file_name']
            resolution = analysis.get('resolution', 'N/A')
            file_size = analysis['file_size_formatted']
            quality = analysis.get('quality_rating', 'N/A').split(' ')[1] if ' ' in analysis.get('quality_rating', '') else analysis.get('quality_rating', 'N/A')
            
            print(f"{filename:<40} {resolution:<12} {file_size:<10} {quality:<15}")
    
    print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(all_analyses)} —Ñ–∞–π–ª–æ–≤.")

if __name__ == "__main__":
    main() 