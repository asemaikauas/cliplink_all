#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python check_specific_video.py path/to/video.mp4
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from backend.test.check_video_quality import analyze_video_quality, print_video_quality

def main():
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞
    """
    if len(sys.argv) != 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python check_specific_video.py path/to/video.mp4")
        print("\n–ü—Ä–∏–º–µ—Ä:")
        print("  python check_specific_video.py downloads/video.mp4")
        print("  python check_specific_video.py ../downloads/UHQ-video.mp4")
        return
    
    video_path = Path(sys.argv[1])
    
    if not video_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
        return
    
    if not video_path.is_file():
        print(f"‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: {video_path}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    video_extensions = ['.mp4', '.mkv', '.avi', '.mov', '.webm', '.flv', '.m4v']
    if video_path.suffix.lower() not in video_extensions:
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {video_path.suffix} –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–º")
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ: {video_path.name}")
    print("="*60)
    
    try:
        analysis = analyze_video_quality(video_path)
        print_video_quality(analysis)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\nüìç –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {video_path.absolute()}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        if 'quality_rating' in analysis:
            rating = analysis['quality_rating']
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            
            if "8K" in rating:
                print("   üèÜ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ! –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.")
            elif "4K" in rating:
                print("   üíé –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ! –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.")
            elif "1440p" in rating:
                print("   ‚≠ê –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ! –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á.")
            elif "Full HD" in rating:
                print("   ‚ú® –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ HD –∫–∞—á–µ—Å—Ç–≤–æ. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ–±-–∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
            elif "HD" in rating:
                print("   üì∫ –ë–∞–∑–æ–≤–æ–µ HD –∫–∞—á–µ—Å—Ç–≤–æ. –ü—Ä–∏–µ–º–ª–µ–º–æ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á.")
            else:
                print("   ‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–∫–∞—á–∞—Ç—å –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ.")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–µ
        if 'file_size' in analysis:
            size_mb = analysis['file_size'] / (1024 * 1024)
            duration = analysis.get('duration', 0)
            
            if duration > 0:
                mb_per_minute = size_mb / (duration / 60)
                print(f"   üìä –†–∞–∑–º–µ—Ä: {mb_per_minute:.1f} MB –Ω–∞ –º–∏–Ω—É—Ç—É")
                
                if mb_per_minute > 100:
                    print("   üíæ –ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
                elif mb_per_minute > 50:
                    print("   üì¶ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
                else:
                    print("   üì± –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return 1
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    return 0

if __name__ == "__main__":
    exit(main()) 